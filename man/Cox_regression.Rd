% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Cox_regression.R
\name{Cox_regression}
\alias{Cox_regression}
\title{Fit a \code{Cox_regression} model as described in (ref du ยง de l'article)}
\usage{
Cox_regression(time_var, event_var, x_vars, data_train, data_test = NULL,
  phi = function(x) {     x }, phi.args = list(), max_time = NULL,
  cox_object = TRUE, eval_methods = c("concordance", "weighted"),
  v_bandwidth = c(20), types_weights_eval = c("KM"),
  max_ratio_weights_eval = 1000, mat_weights = NULL,
  time_non_censored_var = NULL, ...)
}
\arguments{
\item{time_var}{A character string which gives the name of the right-censored variable}

\item{event_var}{A character string which gives the name of the event variable (this variable should be binary : 1 = non censored, 0 = censored)}

\item{x_vars}{A vector of character strings which gives the names of the explanatory variables}

\item{data_train}{A data.frame of training observations. It must contain the column names \code{time_var},
\code{event_var} and \code{x_vars}}

\item{data_test}{A data.frame of testing observations (default = \code{NULL})}

\item{phi}{A function to be applied to \code{time_var}}

\item{phi.args}{A list of additional parameters for the function \code{phi} (default = NULL). See \emph{Examples} for a use case}

\item{max_time}{A real number giving a threshold for \code{time_var} (default = \code{NULL}). If \code{NULL}, then max_time is
set to the maximum non censored observation of \code{time_var} among the training set}

\item{cox_object}{A boolean which indicates if the Cox model fitted to the training data should be returned (default = \code{TRUE})}

\item{eval_methods}{A vector of character strings which gives the methods that should be used for the evaluation of the
model (default = \code{c("concordance","weighted")}).
Possible choices are "concordance", "weighted", "group" and "single". Multiple choices are possible.
See \emph{Details - Evaluation criteria} for more information}

\item{v_bandwidth}{A vector of real numbers for the bandwidths to use for the model evaluation if \code{"group"} is used
as an \code{eval_method} (default = \code{c(20)}). Only used if \code{"group"} is used as \code{eval_method}.
See \emph{Details - Evaluation criteria} for more information}

\item{types_weights_eval}{A vector of character strings which gives the types of weights to be used for IPCW
in the model evaluation (default = \code{c("KM")} (Kaplan Meier)).
Possible choices are "KM", "Cox", "RSF" and "0_1". See \emph{Details - Evaluation criteria} for more information}

\item{max_ratio_weights_eval}{A real number which gives the maximum admissible ratio for the IPC weights (default = 1000).
See \emph{Details - Evaluation criteria} for more information}

\item{mat_weights}{A matrix to provide handmade IPC weights for the model evaluation (default = \code{NULL}).
\code{mat_weights} should satisfied \code{nrow(mat_weights) = nrow(data_train) + nrow(data_test)} and should give the
in columns (multiple columns are possible). Column names of \code{mat_weights} may be used to specify names
for the provided weights (by default names will be "w1), "w2", ...}

\item{time_non_censored_var}{A character string which gives the name of the non censored \code{time_var} (default = NULL).
To be used only in the context os simulated data.}

\item{...}{Additional parameter for ...}
}
\value{
A list with the following elements :
\item{predicted}{A vector of the predicted values for phi(T)}
\item{survival}{A dataframe (matrix) of the predicted survival curves given by the Cox model}
\item{time_points}{A vector of the time points where the survival curves are evaluated}
}
\description{
ma description
}
\details{
\itemize{ %je peux utiliser enumerate si je souhaite mettre des numero
\item \emph{Evaluation criteria}

balbla
\item rezre erae}
}
\examples{

data(veteran, package = "randomForestSRC")
res1 = Cox_regression(time_var = "time", event_var = "status",
                      x_vars = setdiff(colnames(veteran),c("time","status")),
                      data_train = veteran)
print(res1$list_criteria_train)
}
